<?xml version="1.0" encoding="UTF-8"?>
<!-- configure.status 为设置日志输出级别，级别如下：OFF 、FATAL 、ERROR、WARN、INFO、DEBUG、TRACE
configure.monitorInterval 监控间隔 指log4j2每隔600秒（10分钟），最低5s，自动监控该配置文件是否有变化，如果变化，则自动根据文件内容重新配置 -->
<Configuration monitorInterval="300" status="OFF">

    <Properties>
        <!-- info日志输出级别 -->
        <Property name="LOG_INFO_LEVEL" value="info"/>
        <!-- error级别日志 -->
        <Property name="LOG_ERROR_LEVEL" value="error"/>
        <!-- debug日志输出级别 -->
        <Property name="LOG_DEBUG_LEVEL" value="debug"/>
        <!-- warn级别日志 -->
        <Property name="LOG_WARN_LEVEL" value="warn"/>
        <!-- 在当前目录下创建名为log目录做日志存放的目录 -->
        <Property name="LOG_HOME" value="c:/log"/>
        <!-- 档案日志存放目录 -->
        <Property name="LOG_ARCHIVE" value="c:/log/archive"/>
        <!-- 模块名称， 影响日志配置名，日志文件名，根据自己项目进行配置 -->
        <Property name="LOG_MODULE_NAME" value="spring-boot"/>
        <!-- 日志文件大小，超过这个大小将被压缩 -->
        <Property name="LOG_MAX_SIZE" value="1 MB"/>
        <!-- 保留多少天以内的日志 -->
        <Property name="LOG_DAYS" value="15"/>
        <!--输出日志的格式：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度， %msg：日志消息，%n是换行符 -->
        <Property name="LOG_PATTERN" value="%d [%t] %-5level %logger{0} - %msg%n"/>
        <!--interval属性用来指定多久滚动一次-->
        <Property name="TIME_BASED_INTERVAL" value="1"/>
    </Properties>

    <Appenders>
        <!-- 控制台输出 -->
        <Console name="CONSOLE" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="${LOG_INFO_LEVEL}" onMatch="ACCEPT" onMismatch="DENY"/>
        </Console>

        <!-- 这个会打印出所有的info级别以上，error级别一下的日志，每次大小超过size或者满足TimeBasedTriggeringPolicy，则日志会自动存入按年月日建立的文件夹下面并进行压缩，作为存档-->
        <!--异步日志会自动批量刷新，所以将immediateFlush属性设置为false"-->
        <RollingFile name="INFO_FILE"
                     filePattern="${LOG_HOME}/${LOG_MODULE_NAME}/INFO/$${date:yyyyMMdd}/checkout-%d{yyyyMMdd}-%i.log.zip"
                     immediateFlush="false">
            <Filters>
                <!--如果是error级别拒绝，设置 onMismatch="NEUTRAL" 可以让日志经过后续的过滤器
                <ThresholdFilter level="${LOG_ERROR_LEVEL}" onMatch="DENY" onMismatch="NEUTRAL"/>-->
                <!--如果是info\warn输出-->
                <ThresholdFilter level="${LOG_INFO_LEVEL}" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG_PATTERN}" charset="UTF-8"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，根据当前filePattern设置是1天滚动一次-->
                <TimeBasedTriggeringPolicy interval="${TIME_BASED_INTERVAL}" modulate="true"/>
                <SizeBasedTriggeringPolicy size="${LOG_MAX_SIZE}"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认同一文件夹下最多保存7个文件-->
            <DirectWriteRolloverStrategy compressionLevel="9"/>
        </RollingFile>
        <!--        DEBUG日志输出-->
        <RollingRandomAccessFile name="DEBUG_FILE"
                                 filePattern="${LOG_HOME}/${LOG_MODULE_NAME}/DEBUG/%d{yyyyMMdd}/checkout-%d{yyyyMMdd}-%i.log.zip"
                                 immediateFlush="false">
            <Filters>
                <!--如果是error级别拒绝，设置 onMismatch="NEUTRAL" 可以让日志经过后续的过滤器
                <ThresholdFilter level="${LOG_ERROR_LEVEL}" onMatch="DENY" onMismatch="NEUTRAL"/>-->
                <!--如果是info\warn输出-->
                <ThresholdFilter level="${LOG_DEBUG_LEVEL}" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG_PATTERN}" charset="UTF-8"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，根据当前filePattern设置是1天滚动一次-->
                <TimeBasedTriggeringPolicy interval="${TIME_BASED_INTERVAL}"/>
                <SizeBasedTriggeringPolicy size="${LOG_MAX_SIZE}"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认同一文件夹下最多保存7个文件-->
            <DirectWriteRolloverStrategy compressionLevel="9"/>
        </RollingRandomAccessFile>
        <!--只记录error级别以上的日志，与info级别的日志分不同的文件保存 -->
        <RollingRandomAccessFile name="ERROR_FILE"
                                 filePattern="${LOG_HOME}/${LOG_MODULE_NAME}/ERROR/%d{yyyyMMdd}/checkout-%d{yyyyMMdd}-%i.log.zip"
                                 immediateFlush="false">
            <Filters>
                <ThresholdFilter level="${LOG_ERROR_LEVEL}" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG_PATTERN}" charset="UTF-8"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="${TIME_BASED_INTERVAL}"/>
                <SizeBasedTriggeringPolicy size="${LOG_MAX_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy max="${LOG_DAYS}"/>
        </RollingRandomAccessFile>
        <!--        warn日志输出-->
        <RollingRandomAccessFile name="WARN_FILE"
                                 filePattern="${LOG_HOME}/${LOG_MODULE_NAME}/WARN/%d{yyyyMMdd}/checkout-%d{yyyyMMdd}-%i.log.zip"
                                 immediateFlush="false">
            <Filters>
                <ThresholdFilter level="${LOG_WARN_LEVEL}" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG_PATTERN}" charset="UTF-8"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="${TIME_BASED_INTERVAL}"/>
                <SizeBasedTriggeringPolicy size="${LOG_MAX_SIZE}"/>
            </Policies>
            <DirectWriteRolloverStrategy compressionLevel="9"/>
        </RollingRandomAccessFile>
    </Appenders>
    <Loggers>
        <!-- 开发环境使用 -->
        <!--<Root level="${LOG_INFO_LEVEL}">
            <AppenderRef ref="STDOUT"/>
        </Root>-->
        <!-- 测试，生产环境使用 -->
        <Root level="${LOG_DEBUG_LEVEL}" includeLocation="false">
            <AppenderRef ref="CONSOLE"/>
<!--            <AppenderRef ref="INFO_FILE"/>
            <AppenderRef ref="DEBUG_FILE"/>
            <AppenderRef ref="WARN_FILE"/>
            <AppenderRef ref="ERROR_FILE"/>-->
        </Root>
    </Loggers>

</Configuration>